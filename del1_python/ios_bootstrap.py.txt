#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Én-fil Cisco IOS bootstrap (pySerial). Switch: mgmt-VLAN + valgt port (access/trunk). Router: mgmt-IF + ev. default route.

import time, getpass, serial

DELAY, LONG = 0.35, 1.2
PRESS_RETURN = b"press return to get started"
INIT_TOKENS  = (b"initial configuration dialog", b"system configuration dialog", b"autoinstall")

def send(ser, cmd, wait=DELAY): ser.write((cmd+"\r\n").encode()); time.sleep(wait)
def run_list(ser, cmds, wait=DELAY): [send(ser,c,wait) for c in cmds]
def wake_console(ser):
    for _ in range(8):
        ser.write(b"\r\n"); time.sleep(0.15)
        if PRESS_RETURN in ser.read(ser.in_waiting or 1).lower(): ser.write(b"\r\n"); time.sleep(0.4)
def skip_init_dialog(ser):
    time.sleep(0.6); out = ser.read(ser.in_waiting or 1).lower()
    if any(t in out for t in INIT_TOKENS): run_list(ser, ["no","no"], wait=0.6)
def enter_enable(ser):
    send(ser,"");  out = ser.read(ser.in_waiting or 1)
    if b">" in out: send(ser,"enable",0.5)

def base_cmds(host, enable_secret, domain, user, user_pw, role, rsa_bits):
    return [
        "configure terminal",
        f"hostname {host}",
        f"enable secret {enable_secret}",
        f"ip domain-name {domain}",
        f"username {user} privilege {role} secret {user_pw}",
        "line vty 0 15", " transport input ssh", " login local", " exec-timeout 10 0", " exit",
        "ip ssh version 2",
        f"crypto key generate rsa modulus {rsa_bits}",
        "no ip http server", "no ip http secure-server", "service password-encryption",
    ]

def switch_cmds(vlan, ip, mask, dgw, port, mode):
    cmds = [
        f"vlan {vlan}", "exit",
        f"interface vlan {vlan}",
        f" ip address {ip} {mask}",
        " no shutdown", " exit",
    ]
    if dgw: cmds += [f"ip default-gateway {dgw}"]
    if mode == "access":
        cmds += [
            f"interface {port}",
            " switchport", " switchport mode access", f" switchport access vlan {vlan}",
            " spanning-tree portfast", " no shutdown", " exit",
        ]
    else:
        cmds += [
            f"interface {port}",
            " switchport", " switchport mode trunk",
            f" switchport trunk allowed vlan add {vlan}",
            " no shutdown", " exit",
        ]
    return cmds

def router_cmds(iface, ip, mask, dgw):
    cmds = [f"interface {iface}", f" ip address {ip} {mask}", " no shutdown", " exit"]
    if dgw: cmds += [f"ip route 0.0.0.0 0.0.0.0 {dgw}"]
    return cmds

def main():
    com   = input("Konsollport (COM3 / /dev/ttyUSB0): ").strip()
    kind  = input("Enhet [s=switch / r=router]: ").strip().lower()

    host  = input("Hostname: ").strip()
    dom   = (input("Domain (ip domain-name) [lab.local]: ").strip() or "lab.local")
    role  = int(input("Admin-privilege [15]: ") or "15")
    bits  = int(input("RSA-bits [2048]: ") or "2048")
    ensec = getpass.getpass("Enable secret: ")
    user  = input("Admin brukernavn: ").strip()
    upw   = getpass.getpass(f"Passord for {user}: ")

    if kind.startswith("s"):
        vlan = int(input("Mgmt VLAN-ID: ").strip())
        ip   = input("Mgmt IP: ").strip()
        mask = input("Maske: ").strip()
        dgw  = input("Default-gw (tom=ingen): ").strip()
        port = input("Portnavn (f.eks. GigabitEthernet1/0/1): ").strip()
        mode = input("Port-modus [access/trunk]: ").strip().lower()
        if mode not in ("access","trunk"): mode = "access"
        dev_cmds = switch_cmds(vlan, ip, mask, dgw, port, mode)
    else:
        iface = input("Mgmt interface (f.eks. GigabitEthernet0/0): ").strip()
        ip    = input("Mgmt IP: ").strip()
        mask  = input("Maske: ").strip()
        dgw   = input("Default-route next-hop (tom=ingen): ").strip()
        dev_cmds = router_cmds(iface, ip, mask, dgw)

    ser = serial.Serial(com, baudrate=9600, timeout=1.0)
    try:
        wake_console(ser); skip_init_dialog(ser); enter_enable(ser)
        run_list(ser, base_cmds(host, ensec, dom, user, upw, role, bits)); time.sleep(LONG)
        run_list(ser, dev_cmds)
        run_list(ser, ["end", "write memory"], wait=LONG)
        print("✅ Ferdig. Test SSH mot", ip)
    finally:
        ser.close()

if __name__ == "__main__":
    main()
